


Identified = Aligned and Indel-confirmed?
Aligned += Indel-confirmed?

Class
    Reference : with ref_seq and grna_seq, with position information
    Aligned_Key : with indel_type
    Aligned_Read : with indel_type from Aligned_key
    Indel_Type

    Genotyper_for_Reference : genotyper for each reference
    Genotype


class Indel_Type
    str type
    int indel_i
    int indel_d
    int indel_pos
    int indel_length
    str indel_seq

    init(read_line, ref_line, pos_line, etc)

        # read indel type.
        # find cut position by using pos_line: ">>>-->>> ----<<<" : find >[]>[]>[]<[]<[]< position
        # find position from the <<<, only by ignoring '-' thing : get substring, ignore '-', get its length.
        # find indel position, for all mismatch-block existing.
        read_indel_type(read_line, ref_line, pos_line)


class Reference
    str name
    str ref_seq
    str guide_rna_seq
    str pos_line

    init(name, ref_seq, grna_seq):

        if ref_seq.find(grna_seq) < 0:
            ref_seq = get_opposite_strand(ref_seq)

        if ref_seq.find(grna_seq) < 0:
            (this error will be checked already before)

        pos_line = get_pos_line(ref_seq, guide_rna_seq)

        # Set_variables_below


class Aligned
    str name
    str ref_name
    str read_line
    str ref_line
    str pos_line
    str match_line
    str phred_line
    float score
    int score_int
    Indel indel


class Aligned_Key(inherit Aligned)
    init(Reference ref, str key_seq):

        ref_seq = ref.ref_seq
        key_seq = key_seq

        alignment = get_align(ref, read)

        #Set_variables_below


class Aligned_Read(inherit Aligned)

    init(Aligned_Key aligned_key, Seq read)

        read_line = read.seq.str
        ref_line = aligned_key.ref_line

        #Set_variables_below


class Genotyper_for_Reference

    init(list[Aligned_Read] aligned_read_list)

        for aligned_read in aligned_read_list:
            dict[aligned_read.indel.type] += 1

        sorted_list: sort_dict(dict, by the values)

        genotype = Genotype(sorted_list)

        #Set_variables_below


class Genotype

    str longtext
    str shorttext
    list[str] warning_message
    bool ignore_this

    init(sorted_list[(indel_type, #count)] genotype_list)

        # set_genotype by calculating the ratio of each indel type.
        # check the 'err' genotype simultaneously
        # set warning message
        # by setting it, set ignore_this




def get_key_from_seq(str seq):

    seq = seq.replace('N', '')

    seq_key = seq[PADDING:-PADDING]
    return seq_key


def get_key_list_of_all_seq():

    seq_hashmap = dict()
    for file_no, file_name in read_file_list:

        read_raw_list = get_read_raw_list(file_name)

        for read_raw in read_raw_list:

            # add hashmap key
            seq = str(read_raw.seq)
            seq_key = get_key_from_seq(seq)

            seq_hashmap[seq_key] = None

    seq_key_list = list(seq_hashmap.keys())
    return seq_key_list


def get_aligned_hashmap(seq_key_list, reference_list):

    for seq_key in seq_key_list:

        aligned_seq_key = get_best_aligned_key(seq, reference_list)

        seq_key_hashmap[seq_key] = aligned_seq_key


def main:
    set_all_variables(inserted_variables)

    is_good_to_go = test_all_input_files_with_message() : testing existence of data file, and valid ref sequences.
    if not is_good_to_go:
        RETURN

    read_file_list = get_valid_data_file_names_list() : return valid data file names, ignoring set-keywords
    reference_list = get_reference_list_from_file() : return references, in the files in ref

    seq_key_list = get_key_list_of_all_seq(file_list, etc) : list(seq_key) to make hashmap

    seq_aligned_hashmap = get_aligned_hashmap(seq_key_list, reference_list) : dict(seq_key -> Aligned_Key)

    genotyper_list_list = []
    for file in file_list:
        read_raw_list = get_read_raw_list(file_name)
        aligned_read_list = get_aligned_read_list(seq_aligned_hashmap, read_raw_list) : find matching seq_key to aligned_key

        genotyper_list = get_genotyper_list(aligned_read_list, reference_list)
        write_sub_log(aligned_read_list, indel_counter_list)
        genotyper_list_list.append(indel_counter_list)

    write_main_log(indel_counter_list_list)
    write_main_html_log(indel_counter_list_list)
    write_main_raw_log(indel_counter_list_list)

    write_main_csv_log(indel_counter_list_list)

    RETURN




#############################
# Nothing useful below here #
#############################


for file_no, file_name in read_file_list:

    indel_counter_list = []
    for reference in reference_list:
        indel_counter = Genotyper_for_Reference(reference)
        indel_counter_list.append(indel_counter)

    read_raw_list = get_read_raw_list(file_name)

    for read_raw in read_raw_list:

        seq = str(read_raw.seq)
        seq = seq.replace('N', '')

        seq_key = seq[PADDING:-PADDING]
        aligned_seq_key = seq_key_hashmap[seq_key]

